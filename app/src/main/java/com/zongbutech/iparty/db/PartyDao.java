package com.zongbutech.iparty.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zongbutech.iparty.db.Party;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PARTY".
*/
public class PartyDao extends AbstractDao<Party, Long> {

    public static final String TABLENAME = "PARTY";

    /**
     * Properties of entity Party.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Only = new Property(3, String.class, "only", false, "ONLY");
        public final static Property Old_price_man = new Property(4, Integer.class, "old_price_man", false, "OLD_PRICE_MAN");
        public final static Property Old_price_woman = new Property(5, Integer.class, "old_price_woman", false, "OLD_PRICE_WOMAN");
        public final static Property Price_man = new Property(6, Integer.class, "price_man", false, "PRICE_MAN");
        public final static Property Price_woman = new Property(7, Integer.class, "price_woman", false, "PRICE_WOMAN");
        public final static Property End_time = new Property(8, java.util.Date.class, "end_time", false, "END_TIME");
        public final static Property Favorite_num = new Property(9, Integer.class, "favorite_num", false, "FAVORITE_NUM");
        public final static Property Leastnum = new Property(10, Integer.class, "leastnum", false, "LEASTNUM");
        public final static Property Sold = new Property(11, Integer.class, "sold", false, "SOLD");
        public final static Property Address = new Property(12, String.class, "address", false, "ADDRESS");
        public final static Property Addressurl = new Property(13, String.class, "addressurl", false, "ADDRESSURL");
        public final static Property Address_thumbnail = new Property(14, String.class, "address_thumbnail", false, "ADDRESS_THUMBNAIL");
        public final static Property Phone = new Property(15, String.class, "phone", false, "PHONE");
        public final static Property Description = new Property(16, String.class, "description", false, "DESCRIPTION");
        public final static Property Content = new Property(17, String.class, "content", false, "CONTENT");
        public final static Property Note = new Property(18, String.class, "note", false, "NOTE");
        public final static Property Pic_base_url = new Property(19, String.class, "pic_base_url", false, "PIC_BASE_URL");
        public final static Property Created_time = new Property(20, java.util.Date.class, "created_time", false, "CREATED_TIME");
        public final static Property Photoids = new Property(21, String.class, "photoids", false, "PHOTOIDS");
        public final static Property Headphoto = new Property(22, String.class, "headphoto", false, "HEADPHOTO");
        public final static Property Wechatgroup = new Property(23, String.class, "wechatgroup", false, "WECHATGROUP");
        public final static Property Customphoto = new Property(24, String.class, "customphoto", false, "CUSTOMPHOTO");
        public final static Property Is_delete = new Property(25, Integer.class, "is_delete", false, "IS_DELETE");
        public final static Property Type_ids = new Property(26, Integer.class, "type_ids", false, "TYPE_IDS");
        public final static Property Limited = new Property(27, Integer.class, "limited", false, "LIMITED");
        public final static Property Maximum_num = new Property(28, Integer.class, "maximum_num", false, "MAXIMUM_NUM");
        public final static Property Start_time = new Property(29, java.util.Date.class, "start_time", false, "START_TIME");
        public final static Property Deadline_time = new Property(30, String.class, "deadline_time", false, "DEADLINE_TIME");
        public final static Property Time_type = new Property(31, Integer.class, "time_type", false, "TIME_TYPE");
        public final static Property Time_text = new Property(32, String.class, "time_text", false, "TIME_TEXT");
        public final static Property User_id = new Property(33, String.class, "user_id", false, "USER_ID");
        public final static Property Is_audited = new Property(34, Boolean.class, "is_audited", false, "IS_AUDITED");
        public final static Property Is_available = new Property(35, Boolean.class, "is_available", false, "IS_AVAILABLE");
        public final static Property Update_time = new Property(36, java.util.Date.class, "update_time", false, "UPDATE_TIME");
        public final static Property Publisher_avatar = new Property(37, String.class, "publisher_avatar", false, "PUBLISHER_AVATAR");
        public final static Property Publisher_id = new Property(38, Integer.class, "publisher_id", false, "PUBLISHER_ID");
        public final static Property Publisher_name = new Property(39, String.class, "publisher_name", false, "PUBLISHER_NAME");
        public final static Property Publisher_star = new Property(40, Integer.class, "publisher_star", false, "PUBLISHER_STAR");
        public final static Property Recommend = new Property(41, String.class, "recommend", false, "RECOMMEND");
        public final static Property Sold_num = new Property(42, Integer.class, "sold_num", false, "SOLD_NUM");
        public final static Property Types = new Property(43, String.class, "types", false, "TYPES");
        public final static Property Week_activity = new Property(44, Integer.class, "week_activity", false, "WEEK_ACTIVITY");
    };


    public PartyDao(DaoConfig config) {
        super(config);
    }
    
    public PartyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PARTY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OBJECT_ID\" TEXT," + // 1: objectId
                "\"TITLE\" TEXT," + // 2: title
                "\"ONLY\" TEXT," + // 3: only
                "\"OLD_PRICE_MAN\" INTEGER," + // 4: old_price_man
                "\"OLD_PRICE_WOMAN\" INTEGER," + // 5: old_price_woman
                "\"PRICE_MAN\" INTEGER," + // 6: price_man
                "\"PRICE_WOMAN\" INTEGER," + // 7: price_woman
                "\"END_TIME\" INTEGER," + // 8: end_time
                "\"FAVORITE_NUM\" INTEGER," + // 9: favorite_num
                "\"LEASTNUM\" INTEGER," + // 10: leastnum
                "\"SOLD\" INTEGER," + // 11: sold
                "\"ADDRESS\" TEXT," + // 12: address
                "\"ADDRESSURL\" TEXT," + // 13: addressurl
                "\"ADDRESS_THUMBNAIL\" TEXT," + // 14: address_thumbnail
                "\"PHONE\" TEXT," + // 15: phone
                "\"DESCRIPTION\" TEXT," + // 16: description
                "\"CONTENT\" TEXT," + // 17: content
                "\"NOTE\" TEXT," + // 18: note
                "\"PIC_BASE_URL\" TEXT," + // 19: pic_base_url
                "\"CREATED_TIME\" INTEGER," + // 20: created_time
                "\"PHOTOIDS\" TEXT," + // 21: photoids
                "\"HEADPHOTO\" TEXT," + // 22: headphoto
                "\"WECHATGROUP\" TEXT," + // 23: wechatgroup
                "\"CUSTOMPHOTO\" TEXT," + // 24: customphoto
                "\"IS_DELETE\" INTEGER," + // 25: is_delete
                "\"TYPE_IDS\" INTEGER," + // 26: type_ids
                "\"LIMITED\" INTEGER," + // 27: limited
                "\"MAXIMUM_NUM\" INTEGER," + // 28: maximum_num
                "\"START_TIME\" INTEGER," + // 29: start_time
                "\"DEADLINE_TIME\" TEXT," + // 30: deadline_time
                "\"TIME_TYPE\" INTEGER," + // 31: time_type
                "\"TIME_TEXT\" TEXT," + // 32: time_text
                "\"USER_ID\" TEXT," + // 33: user_id
                "\"IS_AUDITED\" INTEGER," + // 34: is_audited
                "\"IS_AVAILABLE\" INTEGER," + // 35: is_available
                "\"UPDATE_TIME\" INTEGER," + // 36: update_time
                "\"PUBLISHER_AVATAR\" TEXT," + // 37: publisher_avatar
                "\"PUBLISHER_ID\" INTEGER," + // 38: publisher_id
                "\"PUBLISHER_NAME\" TEXT," + // 39: publisher_name
                "\"PUBLISHER_STAR\" INTEGER," + // 40: publisher_star
                "\"RECOMMEND\" TEXT," + // 41: recommend
                "\"SOLD_NUM\" INTEGER," + // 42: sold_num
                "\"TYPES\" TEXT," + // 43: types
                "\"WEEK_ACTIVITY\" INTEGER);"); // 44: week_activity
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PARTY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Party entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(2, objectId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String only = entity.getOnly();
        if (only != null) {
            stmt.bindString(4, only);
        }
 
        Integer old_price_man = entity.getOld_price_man();
        if (old_price_man != null) {
            stmt.bindLong(5, old_price_man);
        }
 
        Integer old_price_woman = entity.getOld_price_woman();
        if (old_price_woman != null) {
            stmt.bindLong(6, old_price_woman);
        }
 
        Integer price_man = entity.getPrice_man();
        if (price_man != null) {
            stmt.bindLong(7, price_man);
        }
 
        Integer price_woman = entity.getPrice_woman();
        if (price_woman != null) {
            stmt.bindLong(8, price_woman);
        }
 
        java.util.Date end_time = entity.getEnd_time();
        if (end_time != null) {
            stmt.bindLong(9, end_time.getTime());
        }
 
        Integer favorite_num = entity.getFavorite_num();
        if (favorite_num != null) {
            stmt.bindLong(10, favorite_num);
        }
 
        Integer leastnum = entity.getLeastnum();
        if (leastnum != null) {
            stmt.bindLong(11, leastnum);
        }
 
        Integer sold = entity.getSold();
        if (sold != null) {
            stmt.bindLong(12, sold);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(13, address);
        }
 
        String addressurl = entity.getAddressurl();
        if (addressurl != null) {
            stmt.bindString(14, addressurl);
        }
 
        String address_thumbnail = entity.getAddress_thumbnail();
        if (address_thumbnail != null) {
            stmt.bindString(15, address_thumbnail);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(16, phone);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(17, description);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(18, content);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(19, note);
        }
 
        String pic_base_url = entity.getPic_base_url();
        if (pic_base_url != null) {
            stmt.bindString(20, pic_base_url);
        }
 
        java.util.Date created_time = entity.getCreated_time();
        if (created_time != null) {
            stmt.bindLong(21, created_time.getTime());
        }
 
        String photoids = entity.getPhotoids();
        if (photoids != null) {
            stmt.bindString(22, photoids);
        }
 
        String headphoto = entity.getHeadphoto();
        if (headphoto != null) {
            stmt.bindString(23, headphoto);
        }
 
        String wechatgroup = entity.getWechatgroup();
        if (wechatgroup != null) {
            stmt.bindString(24, wechatgroup);
        }
 
        String customphoto = entity.getCustomphoto();
        if (customphoto != null) {
            stmt.bindString(25, customphoto);
        }
 
        Integer is_delete = entity.getIs_delete();
        if (is_delete != null) {
            stmt.bindLong(26, is_delete);
        }
 
        Integer type_ids = entity.getType_ids();
        if (type_ids != null) {
            stmt.bindLong(27, type_ids);
        }
 
        Integer limited = entity.getLimited();
        if (limited != null) {
            stmt.bindLong(28, limited);
        }
 
        Integer maximum_num = entity.getMaximum_num();
        if (maximum_num != null) {
            stmt.bindLong(29, maximum_num);
        }
 
        java.util.Date start_time = entity.getStart_time();
        if (start_time != null) {
            stmt.bindLong(30, start_time.getTime());
        }
 
        String deadline_time = entity.getDeadline_time();
        if (deadline_time != null) {
            stmt.bindString(31, deadline_time);
        }
 
        Integer time_type = entity.getTime_type();
        if (time_type != null) {
            stmt.bindLong(32, time_type);
        }
 
        String time_text = entity.getTime_text();
        if (time_text != null) {
            stmt.bindString(33, time_text);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(34, user_id);
        }
 
        Boolean is_audited = entity.getIs_audited();
        if (is_audited != null) {
            stmt.bindLong(35, is_audited ? 1L: 0L);
        }
 
        Boolean is_available = entity.getIs_available();
        if (is_available != null) {
            stmt.bindLong(36, is_available ? 1L: 0L);
        }
 
        java.util.Date update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindLong(37, update_time.getTime());
        }
 
        String publisher_avatar = entity.getPublisher_avatar();
        if (publisher_avatar != null) {
            stmt.bindString(38, publisher_avatar);
        }
 
        Integer publisher_id = entity.getPublisher_id();
        if (publisher_id != null) {
            stmt.bindLong(39, publisher_id);
        }
 
        String publisher_name = entity.getPublisher_name();
        if (publisher_name != null) {
            stmt.bindString(40, publisher_name);
        }
 
        Integer publisher_star = entity.getPublisher_star();
        if (publisher_star != null) {
            stmt.bindLong(41, publisher_star);
        }
 
        String recommend = entity.getRecommend();
        if (recommend != null) {
            stmt.bindString(42, recommend);
        }
 
        Integer sold_num = entity.getSold_num();
        if (sold_num != null) {
            stmt.bindLong(43, sold_num);
        }
 
        String types = entity.getTypes();
        if (types != null) {
            stmt.bindString(44, types);
        }
 
        Integer week_activity = entity.getWeek_activity();
        if (week_activity != null) {
            stmt.bindLong(45, week_activity);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Party readEntity(Cursor cursor, int offset) {
        Party entity = new Party( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // objectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // only
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // old_price_man
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // old_price_woman
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // price_man
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // price_woman
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // end_time
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // favorite_num
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // leastnum
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // sold
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // address
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // addressurl
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // address_thumbnail
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // phone
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // description
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // content
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // note
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // pic_base_url
            cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)), // created_time
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // photoids
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // headphoto
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // wechatgroup
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // customphoto
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // is_delete
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // type_ids
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // limited
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // maximum_num
            cursor.isNull(offset + 29) ? null : new java.util.Date(cursor.getLong(offset + 29)), // start_time
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // deadline_time
            cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31), // time_type
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // time_text
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // user_id
            cursor.isNull(offset + 34) ? null : cursor.getShort(offset + 34) != 0, // is_audited
            cursor.isNull(offset + 35) ? null : cursor.getShort(offset + 35) != 0, // is_available
            cursor.isNull(offset + 36) ? null : new java.util.Date(cursor.getLong(offset + 36)), // update_time
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // publisher_avatar
            cursor.isNull(offset + 38) ? null : cursor.getInt(offset + 38), // publisher_id
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // publisher_name
            cursor.isNull(offset + 40) ? null : cursor.getInt(offset + 40), // publisher_star
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // recommend
            cursor.isNull(offset + 42) ? null : cursor.getInt(offset + 42), // sold_num
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // types
            cursor.isNull(offset + 44) ? null : cursor.getInt(offset + 44) // week_activity
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Party entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOnly(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOld_price_man(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setOld_price_woman(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setPrice_man(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPrice_woman(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setEnd_time(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setFavorite_num(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setLeastnum(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setSold(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setAddress(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAddressurl(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAddress_thumbnail(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPhone(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDescription(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setContent(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setNote(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPic_base_url(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCreated_time(cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)));
        entity.setPhotoids(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setHeadphoto(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setWechatgroup(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setCustomphoto(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setIs_delete(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setType_ids(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setLimited(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setMaximum_num(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setStart_time(cursor.isNull(offset + 29) ? null : new java.util.Date(cursor.getLong(offset + 29)));
        entity.setDeadline_time(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setTime_type(cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31));
        entity.setTime_text(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setUser_id(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setIs_audited(cursor.isNull(offset + 34) ? null : cursor.getShort(offset + 34) != 0);
        entity.setIs_available(cursor.isNull(offset + 35) ? null : cursor.getShort(offset + 35) != 0);
        entity.setUpdate_time(cursor.isNull(offset + 36) ? null : new java.util.Date(cursor.getLong(offset + 36)));
        entity.setPublisher_avatar(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setPublisher_id(cursor.isNull(offset + 38) ? null : cursor.getInt(offset + 38));
        entity.setPublisher_name(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setPublisher_star(cursor.isNull(offset + 40) ? null : cursor.getInt(offset + 40));
        entity.setRecommend(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setSold_num(cursor.isNull(offset + 42) ? null : cursor.getInt(offset + 42));
        entity.setTypes(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setWeek_activity(cursor.isNull(offset + 44) ? null : cursor.getInt(offset + 44));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Party entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Party entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
