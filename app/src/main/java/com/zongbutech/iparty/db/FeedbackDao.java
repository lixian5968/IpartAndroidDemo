package com.zongbutech.iparty.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zongbutech.iparty.db.Feedback;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FEEDBACK".
*/
public class FeedbackDao extends AbstractDao<Feedback, Long> {

    public static final String TABLENAME = "FEEDBACK";

    /**
     * Properties of entity Feedback.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Contact = new Property(3, String.class, "contact", false, "CONTACT");
        public final static Property User_id = new Property(4, String.class, "user_id", false, "USER_ID");
        public final static Property User_ip = new Property(5, String.class, "user_ip", false, "USER_IP");
        public final static Property Created_time = new Property(6, java.util.Date.class, "created_time", false, "CREATED_TIME");
    };


    public FeedbackDao(DaoConfig config) {
        super(config);
    }
    
    public FeedbackDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FEEDBACK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OBJECT_ID\" TEXT," + // 1: objectId
                "\"CONTENT\" TEXT," + // 2: content
                "\"CONTACT\" TEXT," + // 3: contact
                "\"USER_ID\" TEXT," + // 4: user_id
                "\"USER_IP\" TEXT," + // 5: user_ip
                "\"CREATED_TIME\" INTEGER);"); // 6: created_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FEEDBACK\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Feedback entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(2, objectId);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String contact = entity.getContact();
        if (contact != null) {
            stmt.bindString(4, contact);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(5, user_id);
        }
 
        String user_ip = entity.getUser_ip();
        if (user_ip != null) {
            stmt.bindString(6, user_ip);
        }
 
        java.util.Date created_time = entity.getCreated_time();
        if (created_time != null) {
            stmt.bindLong(7, created_time.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Feedback readEntity(Cursor cursor, int offset) {
        Feedback entity = new Feedback( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // objectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // contact
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // user_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // user_ip
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // created_time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Feedback entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContact(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_ip(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreated_time(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Feedback entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Feedback entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
