package com.zongbutech.iparty.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zongbutech.iparty.db.Talent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TALENT".
*/
public class TalentDao extends AbstractDao<Talent, Long> {

    public static final String TABLENAME = "TALENT";

    /**
     * Properties of entity Talent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property User_id = new Property(2, String.class, "user_id", false, "USER_ID");
        public final static Property Real_name = new Property(3, String.class, "real_name", false, "REAL_NAME");
        public final static Property Avatar = new Property(4, String.class, "avatar", false, "AVATAR");
        public final static Property Identify = new Property(5, Integer.class, "identify", false, "IDENTIFY");
        public final static Property City = new Property(6, String.class, "city", false, "CITY");
        public final static Property Province = new Property(7, String.class, "province", false, "PROVINCE");
        public final static Property Wechat_account = new Property(8, String.class, "wechat_account", false, "WECHAT_ACCOUNT");
        public final static Property Phone = new Property(9, String.class, "phone", false, "PHONE");
        public final static Property Photo_ids = new Property(10, String.class, "photo_ids", false, "PHOTO_IDS");
        public final static Property Introduction = new Property(11, String.class, "introduction", false, "INTRODUCTION");
        public final static Property Details = new Property(12, String.class, "details", false, "DETAILS");
        public final static Property Type_ids = new Property(13, Integer.class, "type_ids", false, "TYPE_IDS");
        public final static Property Created_time = new Property(14, java.util.Date.class, "created_time", false, "CREATED_TIME");
        public final static Property Is_audited = new Property(15, Boolean.class, "is_audited", false, "IS_AUDITED");
        public final static Property Update_time = new Property(16, java.util.Date.class, "update_time", false, "UPDATE_TIME");
    };


    public TalentDao(DaoConfig config) {
        super(config);
    }
    
    public TalentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TALENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OBJECT_ID\" TEXT," + // 1: objectId
                "\"USER_ID\" TEXT," + // 2: user_id
                "\"REAL_NAME\" TEXT," + // 3: real_name
                "\"AVATAR\" TEXT," + // 4: avatar
                "\"IDENTIFY\" INTEGER," + // 5: identify
                "\"CITY\" TEXT," + // 6: city
                "\"PROVINCE\" TEXT," + // 7: province
                "\"WECHAT_ACCOUNT\" TEXT," + // 8: wechat_account
                "\"PHONE\" TEXT," + // 9: phone
                "\"PHOTO_IDS\" TEXT," + // 10: photo_ids
                "\"INTRODUCTION\" TEXT," + // 11: introduction
                "\"DETAILS\" TEXT," + // 12: details
                "\"TYPE_IDS\" INTEGER," + // 13: type_ids
                "\"CREATED_TIME\" INTEGER," + // 14: created_time
                "\"IS_AUDITED\" INTEGER," + // 15: is_audited
                "\"UPDATE_TIME\" INTEGER);"); // 16: update_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TALENT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Talent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(2, objectId);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(3, user_id);
        }
 
        String real_name = entity.getReal_name();
        if (real_name != null) {
            stmt.bindString(4, real_name);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
 
        Integer identify = entity.getIdentify();
        if (identify != null) {
            stmt.bindLong(6, identify);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(7, city);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(8, province);
        }
 
        String wechat_account = entity.getWechat_account();
        if (wechat_account != null) {
            stmt.bindString(9, wechat_account);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(10, phone);
        }
 
        String photo_ids = entity.getPhoto_ids();
        if (photo_ids != null) {
            stmt.bindString(11, photo_ids);
        }
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(12, introduction);
        }
 
        String details = entity.getDetails();
        if (details != null) {
            stmt.bindString(13, details);
        }
 
        Integer type_ids = entity.getType_ids();
        if (type_ids != null) {
            stmt.bindLong(14, type_ids);
        }
 
        java.util.Date created_time = entity.getCreated_time();
        if (created_time != null) {
            stmt.bindLong(15, created_time.getTime());
        }
 
        Boolean is_audited = entity.getIs_audited();
        if (is_audited != null) {
            stmt.bindLong(16, is_audited ? 1L: 0L);
        }
 
        java.util.Date update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindLong(17, update_time.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Talent readEntity(Cursor cursor, int offset) {
        Talent entity = new Talent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // objectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // real_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // avatar
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // identify
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // city
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // province
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // wechat_account
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // phone
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // photo_ids
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // introduction
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // details
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // type_ids
            cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)), // created_time
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // is_audited
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)) // update_time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Talent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setReal_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAvatar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIdentify(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCity(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setProvince(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWechat_account(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPhone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPhoto_ids(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIntroduction(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDetails(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setType_ids(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setCreated_time(cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)));
        entity.setIs_audited(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setUpdate_time(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Talent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Talent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
