package com.loveiparty.http.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.loveiparty.http.db.Coupon;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COUPON".
*/
public class CouponDao extends AbstractDao<Coupon, Long> {

    public static final String TABLENAME = "COUPON";

    /**
     * Properties of entity Coupon.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property User_id = new Property(2, String.class, "user_id", false, "USER_ID");
        public final static Property Created_time = new Property(3, java.util.Date.class, "created_time", false, "CREATED_TIME");
        public final static Property Updated_time = new Property(4, java.util.Date.class, "updated_time", false, "UPDATED_TIME");
        public final static Property Start_time = new Property(5, java.util.Date.class, "start_time", false, "START_TIME");
        public final static Property End_time = new Property(6, java.util.Date.class, "end_time", false, "END_TIME");
        public final static Property Photo = new Property(7, String.class, "photo", false, "PHOTO");
        public final static Property State = new Property(8, String.class, "state", false, "STATE");
        public final static Property Amount = new Property(9, String.class, "amount", false, "AMOUNT");
        public final static Property Limited_amount = new Property(10, String.class, "limited_amount", false, "LIMITED_AMOUNT");
        public final static Property Description = new Property(11, String.class, "description", false, "DESCRIPTION");
    };


    public CouponDao(DaoConfig config) {
        super(config);
    }
    
    public CouponDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COUPON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OBJECT_ID\" TEXT," + // 1: objectId
                "\"USER_ID\" TEXT," + // 2: user_id
                "\"CREATED_TIME\" INTEGER," + // 3: created_time
                "\"UPDATED_TIME\" INTEGER," + // 4: updated_time
                "\"START_TIME\" INTEGER," + // 5: start_time
                "\"END_TIME\" INTEGER," + // 6: end_time
                "\"PHOTO\" TEXT," + // 7: photo
                "\"STATE\" TEXT," + // 8: state
                "\"AMOUNT\" TEXT," + // 9: amount
                "\"LIMITED_AMOUNT\" TEXT," + // 10: limited_amount
                "\"DESCRIPTION\" TEXT);"); // 11: description
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COUPON\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Coupon entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(2, objectId);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(3, user_id);
        }
 
        java.util.Date created_time = entity.getCreated_time();
        if (created_time != null) {
            stmt.bindLong(4, created_time.getTime());
        }
 
        java.util.Date updated_time = entity.getUpdated_time();
        if (updated_time != null) {
            stmt.bindLong(5, updated_time.getTime());
        }
 
        java.util.Date start_time = entity.getStart_time();
        if (start_time != null) {
            stmt.bindLong(6, start_time.getTime());
        }
 
        java.util.Date end_time = entity.getEnd_time();
        if (end_time != null) {
            stmt.bindLong(7, end_time.getTime());
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(8, photo);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(9, state);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(10, amount);
        }
 
        String limited_amount = entity.getLimited_amount();
        if (limited_amount != null) {
            stmt.bindString(11, limited_amount);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(12, description);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Coupon readEntity(Cursor cursor, int offset) {
        Coupon entity = new Coupon( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // objectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_id
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // created_time
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // updated_time
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // start_time
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // end_time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // photo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // state
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // amount
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // limited_amount
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // description
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Coupon entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreated_time(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setUpdated_time(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setStart_time(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setEnd_time(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setPhoto(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setState(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAmount(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLimited_amount(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDescription(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Coupon entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Coupon entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
