package com.loveiparty.http.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.loveiparty.http.db.Order;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER".
*/
public class OrderDao extends AbstractDao<Order, Long> {

    public static final String TABLENAME = "ORDER";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property User_id = new Property(2, String.class, "user_id", false, "USER_ID");
        public final static Property Party_id = new Property(3, String.class, "party_id", false, "PARTY_ID");
        public final static Property Status = new Property(4, Integer.class, "status", false, "STATUS");
        public final static Property Refund_state = new Property(5, Integer.class, "refund_state", false, "REFUND_STATE");
        public final static Property Created_time = new Property(6, java.util.Date.class, "created_time", false, "CREATED_TIME");
        public final static Property Party_time = new Property(7, String.class, "party_time", false, "PARTY_TIME");
        public final static Property Phone = new Property(8, String.class, "phone", false, "PHONE");
        public final static Property Sex = new Property(9, Integer.class, "sex", false, "SEX");
        public final static Property Isshare = new Property(10, Integer.class, "isshare", false, "ISSHARE");
        public final static Property Share_user_id = new Property(11, String.class, "share_user_id", false, "SHARE_USER_ID");
        public final static Property Share_id = new Property(12, String.class, "share_id", false, "SHARE_ID");
        public final static Property Paytime = new Property(13, String.class, "paytime", false, "PAYTIME");
        public final static Property Party_title = new Property(14, String.class, "party_title", false, "PARTY_TITLE");
        public final static Property Issendmsg = new Property(15, Integer.class, "issendmsg", false, "ISSENDMSG");
        public final static Property Send_notifications = new Property(16, Integer.class, "send_notifications", false, "SEND_NOTIFICATIONS");
        public final static Property Is_del = new Property(17, Integer.class, "is_del", false, "IS_DEL");
        public final static Property Discount = new Property(18, Integer.class, "discount", false, "DISCOUNT");
        public final static Property Out_trade_no = new Property(19, String.class, "out_trade_no", false, "OUT_TRADE_NO");
        public final static Property Bonus_id = new Property(20, String.class, "bonus_id", false, "BONUS_ID");
        public final static Property Price = new Property(21, Integer.class, "price", false, "PRICE");
        public final static Property Update_time = new Property(22, java.util.Date.class, "update_time", false, "UPDATE_TIME");
    };


    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OBJECT_ID\" TEXT," + // 1: objectId
                "\"USER_ID\" TEXT," + // 2: user_id
                "\"PARTY_ID\" TEXT," + // 3: party_id
                "\"STATUS\" INTEGER," + // 4: status
                "\"REFUND_STATE\" INTEGER," + // 5: refund_state
                "\"CREATED_TIME\" INTEGER," + // 6: created_time
                "\"PARTY_TIME\" TEXT," + // 7: party_time
                "\"PHONE\" TEXT," + // 8: phone
                "\"SEX\" INTEGER," + // 9: sex
                "\"ISSHARE\" INTEGER," + // 10: isshare
                "\"SHARE_USER_ID\" TEXT," + // 11: share_user_id
                "\"SHARE_ID\" TEXT," + // 12: share_id
                "\"PAYTIME\" TEXT," + // 13: paytime
                "\"PARTY_TITLE\" TEXT," + // 14: party_title
                "\"ISSENDMSG\" INTEGER," + // 15: issendmsg
                "\"SEND_NOTIFICATIONS\" INTEGER," + // 16: send_notifications
                "\"IS_DEL\" INTEGER," + // 17: is_del
                "\"DISCOUNT\" INTEGER," + // 18: discount
                "\"OUT_TRADE_NO\" TEXT," + // 19: out_trade_no
                "\"BONUS_ID\" TEXT," + // 20: bonus_id
                "\"PRICE\" INTEGER," + // 21: price
                "\"UPDATE_TIME\" INTEGER);"); // 22: update_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(2, objectId);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(3, user_id);
        }
 
        String party_id = entity.getParty_id();
        if (party_id != null) {
            stmt.bindString(4, party_id);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(5, status);
        }
 
        Integer refund_state = entity.getRefund_state();
        if (refund_state != null) {
            stmt.bindLong(6, refund_state);
        }
 
        java.util.Date created_time = entity.getCreated_time();
        if (created_time != null) {
            stmt.bindLong(7, created_time.getTime());
        }
 
        String party_time = entity.getParty_time();
        if (party_time != null) {
            stmt.bindString(8, party_time);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(10, sex);
        }
 
        Integer isshare = entity.getIsshare();
        if (isshare != null) {
            stmt.bindLong(11, isshare);
        }
 
        String share_user_id = entity.getShare_user_id();
        if (share_user_id != null) {
            stmt.bindString(12, share_user_id);
        }
 
        String share_id = entity.getShare_id();
        if (share_id != null) {
            stmt.bindString(13, share_id);
        }
 
        String paytime = entity.getPaytime();
        if (paytime != null) {
            stmt.bindString(14, paytime);
        }
 
        String party_title = entity.getParty_title();
        if (party_title != null) {
            stmt.bindString(15, party_title);
        }
 
        Integer issendmsg = entity.getIssendmsg();
        if (issendmsg != null) {
            stmt.bindLong(16, issendmsg);
        }
 
        Integer send_notifications = entity.getSend_notifications();
        if (send_notifications != null) {
            stmt.bindLong(17, send_notifications);
        }
 
        Integer is_del = entity.getIs_del();
        if (is_del != null) {
            stmt.bindLong(18, is_del);
        }
 
        Integer discount = entity.getDiscount();
        if (discount != null) {
            stmt.bindLong(19, discount);
        }
 
        String out_trade_no = entity.getOut_trade_no();
        if (out_trade_no != null) {
            stmt.bindString(20, out_trade_no);
        }
 
        String bonus_id = entity.getBonus_id();
        if (bonus_id != null) {
            stmt.bindString(21, bonus_id);
        }
 
        Integer price = entity.getPrice();
        if (price != null) {
            stmt.bindLong(22, price);
        }
 
        java.util.Date update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindLong(23, update_time.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // objectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // party_id
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // status
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // refund_state
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // created_time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // party_time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // phone
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // sex
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // isshare
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // share_user_id
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // share_id
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // paytime
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // party_title
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // issendmsg
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // send_notifications
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // is_del
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // discount
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // out_trade_no
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // bonus_id
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // price
            cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)) // update_time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setParty_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setRefund_state(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCreated_time(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setParty_time(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSex(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setIsshare(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setShare_user_id(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setShare_id(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPaytime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setParty_title(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIssendmsg(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setSend_notifications(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setIs_del(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setDiscount(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setOut_trade_no(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setBonus_id(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPrice(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setUpdate_time(cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Order entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Order entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
