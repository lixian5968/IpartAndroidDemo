package com.loveiparty.http.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.loveiparty.http.db.Comment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMENT".
*/
public class CommentDao extends AbstractDao<Comment, Long> {

    public static final String TABLENAME = "COMMENT";

    /**
     * Properties of entity Comment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property User_id = new Property(2, String.class, "user_id", false, "USER_ID");
        public final static Property Created_time = new Property(3, java.util.Date.class, "created_time", false, "CREATED_TIME");
        public final static Property Updated_time = new Property(4, java.util.Date.class, "updated_time", false, "UPDATED_TIME");
        public final static Property Username = new Property(5, String.class, "username", false, "USERNAME");
        public final static Property Order_id = new Property(6, String.class, "order_id", false, "ORDER_ID");
        public final static Property Party_id = new Property(7, String.class, "party_id", false, "PARTY_ID");
        public final static Property Stars = new Property(8, String.class, "stars", false, "STARS");
        public final static Property Content = new Property(9, String.class, "content", false, "CONTENT");
        public final static Property Photos = new Property(10, String.class, "photos", false, "PHOTOS");
        public final static Property Is_anonymous = new Property(11, String.class, "is_anonymous", false, "IS_ANONYMOUS");
        public final static Property Status = new Property(12, String.class, "status", false, "STATUS");
    };


    public CommentDao(DaoConfig config) {
        super(config);
    }
    
    public CommentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OBJECT_ID\" TEXT," + // 1: objectId
                "\"USER_ID\" TEXT," + // 2: user_id
                "\"CREATED_TIME\" INTEGER," + // 3: created_time
                "\"UPDATED_TIME\" INTEGER," + // 4: updated_time
                "\"USERNAME\" TEXT," + // 5: username
                "\"ORDER_ID\" TEXT," + // 6: order_id
                "\"PARTY_ID\" TEXT," + // 7: party_id
                "\"STARS\" TEXT," + // 8: stars
                "\"CONTENT\" TEXT," + // 9: content
                "\"PHOTOS\" TEXT," + // 10: photos
                "\"IS_ANONYMOUS\" TEXT," + // 11: is_anonymous
                "\"STATUS\" TEXT);"); // 12: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMENT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Comment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(2, objectId);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(3, user_id);
        }
 
        java.util.Date created_time = entity.getCreated_time();
        if (created_time != null) {
            stmt.bindLong(4, created_time.getTime());
        }
 
        java.util.Date updated_time = entity.getUpdated_time();
        if (updated_time != null) {
            stmt.bindLong(5, updated_time.getTime());
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(6, username);
        }
 
        String order_id = entity.getOrder_id();
        if (order_id != null) {
            stmt.bindString(7, order_id);
        }
 
        String party_id = entity.getParty_id();
        if (party_id != null) {
            stmt.bindString(8, party_id);
        }
 
        String stars = entity.getStars();
        if (stars != null) {
            stmt.bindString(9, stars);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(10, content);
        }
 
        String photos = entity.getPhotos();
        if (photos != null) {
            stmt.bindString(11, photos);
        }
 
        String is_anonymous = entity.getIs_anonymous();
        if (is_anonymous != null) {
            stmt.bindString(12, is_anonymous);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(13, status);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Comment readEntity(Cursor cursor, int offset) {
        Comment entity = new Comment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // objectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_id
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // created_time
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // updated_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // username
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // order_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // party_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // stars
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // content
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // photos
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // is_anonymous
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Comment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreated_time(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setUpdated_time(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setUsername(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOrder_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setParty_id(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStars(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setContent(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPhotos(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIs_anonymous(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStatus(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Comment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Comment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
