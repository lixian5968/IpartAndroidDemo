package com.loveiparty.http.db;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.loveiparty.http.db.UserAssetDao;
import com.loveiparty.http.db.CommentDao;
import com.loveiparty.http.db.CouponDao;
import com.loveiparty.http.db.ETicketDao;
import com.loveiparty.http.db.MyFavoriteDao;
import com.loveiparty.http.db.FeedbackDao;
import com.loveiparty.http.db.MessageDao;
import com.loveiparty.http.db.NotificationPushDao;
import com.loveiparty.http.db.OrderDao;
import com.loveiparty.http.db.PartyDao;
import com.loveiparty.http.db.TalentDao;
import com.loveiparty.http.db.UserDao;
import com.loveiparty.http.db.UrlStringDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        UserAssetDao.createTable(db, ifNotExists);
        CommentDao.createTable(db, ifNotExists);
        CouponDao.createTable(db, ifNotExists);
        ETicketDao.createTable(db, ifNotExists);
        MyFavoriteDao.createTable(db, ifNotExists);
        FeedbackDao.createTable(db, ifNotExists);
        MessageDao.createTable(db, ifNotExists);
        NotificationPushDao.createTable(db, ifNotExists);
        OrderDao.createTable(db, ifNotExists);
        PartyDao.createTable(db, ifNotExists);
        TalentDao.createTable(db, ifNotExists);
        UserDao.createTable(db, ifNotExists);
        UrlStringDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        UserAssetDao.dropTable(db, ifExists);
        CommentDao.dropTable(db, ifExists);
        CouponDao.dropTable(db, ifExists);
        ETicketDao.dropTable(db, ifExists);
        MyFavoriteDao.dropTable(db, ifExists);
        FeedbackDao.dropTable(db, ifExists);
        MessageDao.dropTable(db, ifExists);
        NotificationPushDao.dropTable(db, ifExists);
        OrderDao.dropTable(db, ifExists);
        PartyDao.dropTable(db, ifExists);
        TalentDao.dropTable(db, ifExists);
        UserDao.dropTable(db, ifExists);
        UrlStringDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(UserAssetDao.class);
        registerDaoClass(CommentDao.class);
        registerDaoClass(CouponDao.class);
        registerDaoClass(ETicketDao.class);
        registerDaoClass(MyFavoriteDao.class);
        registerDaoClass(FeedbackDao.class);
        registerDaoClass(MessageDao.class);
        registerDaoClass(NotificationPushDao.class);
        registerDaoClass(OrderDao.class);
        registerDaoClass(PartyDao.class);
        registerDaoClass(TalentDao.class);
        registerDaoClass(UserDao.class);
        registerDaoClass(UrlStringDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
